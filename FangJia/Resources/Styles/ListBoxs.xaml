<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:FangJia.UI.Converters"
                    xmlns:sys="clr-namespace:System;assembly=System.Runtime">
    <!-- ToggleButton Style -->
    <Style x:Key="MenuToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}"
                                Margin="0,5"
                                Padding="5"
                                Height="42"
                                CornerRadius="5">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock x:Name="IconBlock"
                                           Text="{Binding Icon}"
                                           Foreground="{TemplateBinding Foreground}"
                                           FontSize="24" FontFamily="{DynamicResource IconFont}"
                                           Width="30"
                                           Margin="0,0,10,0"
                                           TextAlignment="Center"
                                           VerticalAlignment="Center"
                                           ToolTip="{Binding ElementName=TextBlock,Path=Text}">
                                    <!-- Using RenderTransform for scaling -->
                                    <TextBlock.RenderTransform>
                                        <ScaleTransform x:Name="IconScale" ScaleX="1" ScaleY="1" />
                                    </TextBlock.RenderTransform>
                                    <TextBlock.RenderTransformOrigin>
                                        <Point X="0.5" Y="0.5" />
                                        <!-- Center of the element -->
                                    </TextBlock.RenderTransformOrigin>
                                </TextBlock>
                                <TextBlock x:Name="TextBlock"
                                           Text="{Binding Name}"
                                           Foreground="{TemplateBinding Foreground}"
                                           FontSize="14" FontWeight="Bold"
                                           Margin="0"
                                           VerticalAlignment="Center">
                                    <!-- Using RenderTransform for translation -->
                                    <TextBlock.RenderTransform>
                                        <TranslateTransform x:Name="TextTranslate" X="0" Y="0" />
                                    </TextBlock.RenderTransform>
                                </TextBlock>
                            </StackPanel>
                        </Border>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup>
                                <!-- Normal State -->
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <!-- Using TranslateTransform for TextBlock margin -->
                                        <DoubleAnimation Storyboard.TargetName="TextTranslate"
                                                         Storyboard.TargetProperty="X"
                                                         Duration="0:0:0.2"
                                                         To="0" />
                                        <!-- Using ScaleTransform for scaling icon and text -->
                                        <DoubleAnimation Storyboard.TargetName="IconScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         Duration="0:0:0.2"
                                                         To="1" />
                                        <DoubleAnimation Storyboard.TargetName="IconScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         Duration="0:0:0.2"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <!-- MouseOver State -->
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <!-- Using TranslateTransform for TextBlock margin -->
                                        <DoubleAnimation Storyboard.TargetName="TextTranslate"
                                                         Storyboard.TargetProperty="X"
                                                         Duration="0:0:0.2"
                                                         To="10" />
                                        <!-- Using ScaleTransform for scaling icon and text -->
                                        <DoubleAnimation Storyboard.TargetName="IconScale"
                                                         Storyboard.TargetProperty="ScaleX"
                                                         Duration="0:0:0.2"
                                                         To="1.25" />
                                        <DoubleAnimation Storyboard.TargetName="IconScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         Duration="0:0:0.2"
                                                         To="1.25" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <converters:MainMenuListWidthConverter x:Key="MainMenuListWidthConverter" />
    <Style x:Key="SidebarListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Grid>
                        <ToggleButton x:Name="MenuItem"
                                      IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Command}"
                                      Width="{Binding ActualWidth, ElementName=SidebarListBox, Converter={StaticResource MainMenuListWidthConverter}}"
                                      Style="{DynamicResource MenuToggleButtonStyle}" />
                        <!-- Visual State Logic Replaced by Triggers -->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Normal State -->
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="MenuItem" Property="Background" Value="Transparent" />
                            <Setter TargetName="MenuItem" Property="Foreground"
                                    Value="{DynamicResource AccentForegroundBrush}" />
                        </Trigger>
                        <!-- MouseOver State -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MenuItem" Property="Background"
                                    Value="{DynamicResource AccentOverlayBrush}" />
                            <Setter TargetName="MenuItem" Property="Foreground"
                                    Value="{DynamicResource AccentForegroundBrush}" />
                        </Trigger>
                        <!-- Selected State -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="MenuItem" Property="Background"
                                    Value="{DynamicResource AccentHighlightBrush}" />
                            <Setter TargetName="MenuItem" Property="Foreground"
                                    Value="{DynamicResource AccentHighlightForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="ListBoxItem" x:Key="DataTabListItemStyle">
        <Setter Property="Foreground"
                Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="80" />
        <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Grid>
                        <ToggleButton x:Name="MenuItem"
                                      IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Command="{Binding Command}"
                                      Width="{TemplateBinding Width}"
                                      Height="{TemplateBinding Height}"
                                      Foreground="{TemplateBinding Foreground}"
                                      Background="{TemplateBinding Background}"
                                      Content="{Binding Name}"
                                      Style="{DynamicResource DataTabToggleButtonStyle}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness}" />
                        <!-- Visual State Logic Replaced by Triggers -->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="MenuItem" Property="Background"
                                    Value="{DynamicResource BackgroundBrush}" />
                            <Setter TargetName="MenuItem" Property="Margin"
                                    Value="0,0,-1,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MenuItem" Property="Background"
                                    Value="{DynamicResource HoverOverlayBrush}" />

                            <Setter TargetName="MenuItem" Property="Margin"
                                    Value="0,0,-15,0" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="MenuItem" Property="Background"
                                    Value="{DynamicResource WeakAccentBackgroundBrush}" />
                            <Setter TargetName="MenuItem" Property="Margin"
                                    Value="0,0,-15,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataTabToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="Border" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                <TextBlock x:Name="TextBlock"
                                           Text="{TemplateBinding Content}"
                                           Foreground="{TemplateBinding Foreground}"
                                           Margin="0" HorizontalAlignment="Center"
                                           VerticalAlignment="Center" />
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  1.确定参数  -->
    <!--纵向滚动条宽度-->
    <sys:Double x:Key="VerticalScrollBarThickness">4</sys:Double>
    <!--纵向滑块颜色-->
    <SolidColorBrush x:Key="VerticalTrackThumbBackgroundBrush" Color="DeepSkyBlue" />
    <!--横向滚动条宽度-->
    <sys:Double x:Key="HorizontalScrollBarThickness">4</sys:Double>
    <!--横向滑块颜色-->
    <SolidColorBrush x:Key="HorizontalTrackThumbBackgroundBrush" Color="DeepSkyBlue" />
    <!-- 自定义垂直滚动条的样式 -->
    <Style TargetType="ScrollBar" x:Key="CustomScrollBarStyle">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="{DynamicResource HorizontalScrollBarThickness}" />
                <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="{DynamicResource VerticalScrollBarThickness}" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- 3.定义template  -->
    <!-- 纵向滚动条template  -->
    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type RangeBase}">
        <Grid Background="Transparent">
            <!--轨道-->
            <Track Name="PART_Track"
                   IsDirectionReversed="True">
                <!-- 减少按钮 -->
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageUpCommand"
                                  Background="{DynamicResource WeakAccentBackgroundBrush}" BorderThickness="0" />
                </Track.DecreaseRepeatButton>

                <!-- 增加按钮 -->
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageDownCommand"
                                  Background="{DynamicResource WeakAccentBackgroundBrush}" BorderThickness="0" />
                </Track.IncreaseRepeatButton>
                <Track.Thumb>
                    <!--滑块-->
                    <Thumb Background="{DynamicResource AccentBackgroundBrush}" BorderThickness="0">
                        <Thumb.Template>
                            <ControlTemplate>
                                <Grid Background="{TemplateBinding Background}" />
                            </ControlTemplate>
                        </Thumb.Template>
                    </Thumb>
                </Track.Thumb>

            </Track>
        </Grid>
    </ControlTemplate>
    <!-- 横向滚动条template  -->
    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type RangeBase}">
        <Grid>
            <Track Name="PART_Track" FlowDirection="LeftToRight">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Background="{DynamicResource AccentBackgroundBrush}" BorderThickness="0">
                        <Thumb.Template>
                            <ControlTemplate>
                                <Grid Background="{TemplateBinding Background}" />
                            </ControlTemplate>
                        </Thumb.Template>
                    </Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>
    <!-- 自定义listbox样式 -->
    <Style TargetType="ListView" x:Key="CustomListBoxStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListView">
                    <Border CornerRadius="5"
                            Padding="4"
                            Margin="5"
                            Background="White"
                            BorderThickness="0">
                        <ScrollViewer Padding="0,10">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 自定义 ListBoxItem 的样式 -->
    <Style TargetType="ListViewItem" x:Key="CustomListViewItemStyle">
        <Setter Property="Foreground" Value="MidnightBlue" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <Grid>
                        <Border Name="ItemBorder" Padding="8,4" Margin="3"
                                CornerRadius="5"
                                Background="{TemplateBinding Background}">
                            <ContentControl x:Name="contentControl"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}"
                                            VerticalAlignment="Center"
                                            Foreground="{TemplateBinding Foreground}" />
                        </Border>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="ItemBorder"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="Transparent" />
                                        <ColorAnimation Storyboard.TargetName="contentControl"
                                                        Storyboard.TargetProperty="(ContentControl.Foreground).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="SteelBlue" />
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <!-- 这里直接将背景设为更深的颜色 -->
                                        <ColorAnimation Storyboard.TargetName="ItemBorder"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="PowderBlue" />
                                        <ColorAnimation Storyboard.TargetName="contentControl"
                                                        Storyboard.TargetProperty="(ContentControl.Foreground).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="Teal" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <!-- 这里直接将背景设为更深的颜色 -->
                                        <ColorAnimation Storyboard.TargetName="ItemBorder"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="DodgerBlue" />
                                        <ColorAnimation Storyboard.TargetName="contentControl"
                                                        Storyboard.TargetProperty="(ContentControl.Foreground).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="Azure" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <!-- 这里直接将背景设为更深的颜色 -->
                                        <ColorAnimation Storyboard.TargetName="ItemBorder"
                                                        Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="DarkGray" />
                                        <ColorAnimation Storyboard.TargetName="contentControl"
                                                        Storyboard.TargetProperty="(ContentControl.Foreground).(SolidColorBrush.Color)"
                                                        Duration="0:0:0.25"
                                                        To="White" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
