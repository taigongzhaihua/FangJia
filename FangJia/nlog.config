<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<!--输出目标,往哪里输出-->
	<targets>
		<!--此部分中的所有目标将自动异步-->
		<default-wrapper xsi:type="AsyncWrapper"></default-wrapper>

		<!--type:日志输出类型 File:文件 ColoredConsole:控制台-->
		<!--fileName:日志存储的路径及名称-->
		<!--layout:日志输出格式-->
		<!-- archiveFileName：要用于存档的文件的名称 可以指定日志 -->
		<!-- archiveAboveSize：以字节为单位的大小，超过该大小的日志文件将被自动存档 -->
		<!-- archiveNumbering：对文件档案进行编号的方式 -->
		<!-- concurrentWrites：当使用keepFileOpen = true时，支持从同一机器主机上的多个进程优化并发写入同一日志文件。通过使用一种特殊的技术，它可以让文件从多个进程中打开。如果只有单个进程（和单个 AppDomain）应用程序正在记录日志，那么设置为concurrentWrites = False会更快。 -->
		<!-- keepFileOpen：指示是否在每次记录事件时保持日志文件打开，将此属性更改为 true 将大大提高性能，但也会保持文件句柄锁定。启用此选项时，请考虑设置openFileCacheTimeout = 30，因为它将允许存档操作并对被删除的日志文件做出反应。 -->

		<!--项目日志保存文件路径说明fileName="${basedir}/保存目录，以年月日的格式创建/${shortdate}/${记录器名称}-${单级记录}-${shortdate}.txt"-->
		<target name="info_file" xsi:type="File"
                fileName="${basedir}/Logs/${shortdate}/info_${shortdate}.txt"
                layout="${longdate} | ${event-properties:item=EventId_Id:whenEmpty=0} | ${uppercase:${level}} | ${logger} | ${message} ${exception:format=tostring}"
                archiveFileName="${basedir}/archives/info_${shortdate}-{#####}.txt"
                archiveAboveSize="102400"
                archiveNumbering="Sequence"
                concurrentWrites="true"
                keepFileOpen="false" />
		<target name="error_file" xsi:type="File"
                fileName="${basedir}/Logs/${shortdate}/error_${shortdate}.txt"
                layout="${longdate} | ${event-properties:item=EventId_Id:whenEmpty=0} | ${uppercase:${level}} | ${logger} | ${message} ${exception:format=tostring}"
                archiveFileName="${basedir}/archives/error_${shortdate}-{#####}.txt"
                archiveAboveSize="102400"
                archiveNumbering="Sequence"
                concurrentWrites="true"
                keepFileOpen="false" />
		<target
			xsi:type="ColoredConsole"
			name="colorConsole"
			encoding="Encoding"
			detectConsoleAvailable="true"
			detectOutputRedirected="false"
			useDefaultRowHighlightingRules="false"
			header="--------------------"
			layout="${longdate}|${level:uppercase=true}|${logger}|${message}|${exception} ${newline} ${stacktrace} ${newline}"
			footer="---------------------"
		>
			<highlight-row condition="level == LogLevel.Trace" foregroundColor="DarkGray"/>
			<highlight-row condition="level == LogLevel.Debug" foregroundColor="DarkBlue"/>
			<highlight-row condition="level == LogLevel.Info" foregroundColor="White"/>
			<highlight-row condition="level == LogLevel.Warn" foregroundColor="DarkYellow"/>
			<highlight-row condition="level == LogLevel.Error" foregroundColor="Red"/>
			<highlight-row condition="level == LogLevel.Fatal" foregroundColor="DarkRed"/>
		</target>
		<!--使用可自定义的着色将日志消息写入控制台-->
		<!-- <target name="console" xsi:type="ColoredConsole" layout="[${date:format=HH\:mm\:ss}]:${message} ${exception:format=message}" /> -->
	</targets>

	<!--规则配置,final - 最终规则匹配后不处理任何规则-->
	<!--定义使用哪个target输出-->
	<rules>
		<!-- 优先级从高到低依次为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、TRACE、 ALL -->
		<!-- 将所有日志输出到文件 -->
		<logger name="*" minlevel="Trace" maxlevel="Warn" writeTo="info_file" />
		<logger name="*" minlevel="Error" writeTo="error_file" />

		<!-- 将所有日志输出到控制台  -->
		<logger name="*" minlevel="Debug" writeTo="colorConsole" />
	</rules>
</nlog>

